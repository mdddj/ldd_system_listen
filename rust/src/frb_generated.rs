// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::api::multiinput::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.1.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -1267495477;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__entitys__ldd_key_id_key_id_to_string_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ldd_key_id_key_id_to_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::entitys::LddKeyId>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::entitys::LddKeyId::key_id_to_string(&api_that),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__entitys__ldd_state_format_string_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ldd_state_format_string",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::entitys::LddState>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::entitys::LddState::format_string(&api_that))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__keyboard_listen__start_listen_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "start_listen",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                crate::api::syste::LddKeyboardValue,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::keyboard_listen::start_listen(api_sink);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__logger__create_log_stream_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_log_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <StreamSink<
                crate::api::entitys::LogEntry,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::logger::create_log_stream(api_s)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__logger__init_logger_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_logger",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::logger::init_logger();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__logger__my_mobile_logger_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "my_mobile_logger_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok(crate::api::logger::MyMobileLogger::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__logger__rust_set_up_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_set_up",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::logger::rust_set_up();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__logger__send_to_dart_logger_new_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send_to_dart_logger_new",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::logger::SendToDartLogger::new())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__logger__send_to_dart_logger_set_stream_sink_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send_to_dart_logger_set_stream_sink",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_stream_sink = <StreamSink<
                crate::api::entitys::LogEntry,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::logger::SendToDartLogger::set_stream_sink(api_stream_sink);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__multiinput__LddKeyboardManager_get_ldd_keyboard_list_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LddKeyboardManager_get_ldd_keyboard_list",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddKeyboardManager>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, true,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                        _ => unreachable!(),
                    }
                }
                let mut api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::multiinput::LddKeyboardManager::get_ldd_keyboard_list(
                        &mut *api_that_guard,
                    ),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__multiinput__LddKeyboardManager_listen_ldd_keyboard_event_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LddKeyboardManager_listen_ldd_keyboard_event",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <LddKeyboardManager>::sse_decode(&mut deserializer);
            let api_gun_device =
                <Option<crate::api::entitys::LddKeyboard>>::sse_decode(&mut deserializer);
            let api_sink = <StreamSink<
                crate::api::entitys::LddRawEvent,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::multiinput::LddKeyboardManager::listen_ldd_keyboard_event(
                            api_that,
                            api_gun_device,
                            api_sink,
                        );
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__multiinput__LddKeyboardManager_new_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LddKeyboardManager_new",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_print_debug = <Option<bool>>::sse_decode(&mut deserializer);
            let api_gun_add_end_return_key = <Option<bool>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::multiinput::LddKeyboardManager::new(
                        api_print_debug,
                        api_gun_add_end_return_key,
                    ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__multiinput__LddKeyboardManager_register_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "LddKeyboardManager_register",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddKeyboardManager>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let mut api_that_guard = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, true,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_guard = Some(api_that.lockable_decode_sync_ref_mut()),
                        _ => unreachable!(),
                    }
                }
                let mut api_that_guard = api_that_guard.unwrap();
                let output_ok = Result::<_, ()>::Ok({
                    crate::api::multiinput::LddKeyboardManager::register(&mut *api_that_guard);
                })?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__syste__start_listen_system_event_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "start_listen_system_event",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                crate::api::syste::LddEvent,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, String>((move || {
                    let output_ok = crate::api::syste::start_listen_system_event(api_sink)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__syste__start_listen_systen_event_by_ldd_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "start_listen_systen_event_by_ldd",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_sink = <StreamSink<
                crate::api::syste::LddKeyboardValue,
                flutter_rust_bridge::for_generated::SseCodec,
            >>::sse_decode(&mut deserializer);
            let api_millis = <Option<u64>>::sse_decode(&mut deserializer);
            let api_min_size = <Option<usize>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::syste::start_listen_systen_event_by_ldd(
                            api_sink,
                            api_millis,
                            api_min_size,
                        );
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddKeyboardManager>
);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for LddKeyboardManager {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddKeyboardManager>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddKeyboardManager>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for StreamSink<crate::api::syste::LddEvent, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<
        crate::api::syste::LddKeyboardValue,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<crate::api::entitys::LddRawEvent, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<crate::api::entitys::LogEntry, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for u128 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return inner.parse().unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::syste::LddButton {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::syste::LddButton::Left;
            }
            1 => {
                return crate::api::syste::LddButton::Right;
            }
            2 => {
                return crate::api::syste::LddButton::Middle;
            }
            3 => {
                let mut var_field0 = <u8>::sse_decode(deserializer);
                return crate::api::syste::LddButton::Unknown(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::syste::LddEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <Option<String>>::sse_decode(deserializer);
        let mut var_eventType = <crate::api::syste::LddEventType>::sse_decode(deserializer);
        return crate::api::syste::LddEvent {
            name: var_name,
            event_type: var_eventType,
        };
    }
}

impl SseDecode for crate::api::syste::LddEventType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::syste::LddKey>::sse_decode(deserializer);
                return crate::api::syste::LddEventType::KeyPress(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::syste::LddKey>::sse_decode(deserializer);
                return crate::api::syste::LddEventType::KeyRelease(var_field0);
            }
            2 => {
                let mut var_field0 = <crate::api::syste::LddButton>::sse_decode(deserializer);
                return crate::api::syste::LddEventType::ButtonPress(var_field0);
            }
            3 => {
                let mut var_field0 = <crate::api::syste::LddButton>::sse_decode(deserializer);
                return crate::api::syste::LddEventType::ButtonRelease(var_field0);
            }
            4 => {
                let mut var_x = <f64>::sse_decode(deserializer);
                let mut var_y = <f64>::sse_decode(deserializer);
                return crate::api::syste::LddEventType::MouseMove { x: var_x, y: var_y };
            }
            5 => {
                let mut var_deltaX = <i64>::sse_decode(deserializer);
                let mut var_deltaY = <i64>::sse_decode(deserializer);
                return crate::api::syste::LddEventType::Wheel {
                    delta_x: var_deltaX,
                    delta_y: var_deltaY,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::syste::LddKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::syste::LddKey::Alt;
            }
            1 => {
                return crate::api::syste::LddKey::AltGr;
            }
            2 => {
                return crate::api::syste::LddKey::Backspace;
            }
            3 => {
                return crate::api::syste::LddKey::CapsLock;
            }
            4 => {
                return crate::api::syste::LddKey::ControlLeft;
            }
            5 => {
                return crate::api::syste::LddKey::ControlRight;
            }
            6 => {
                return crate::api::syste::LddKey::Delete;
            }
            7 => {
                return crate::api::syste::LddKey::DownArrow;
            }
            8 => {
                return crate::api::syste::LddKey::End;
            }
            9 => {
                return crate::api::syste::LddKey::Escape;
            }
            10 => {
                return crate::api::syste::LddKey::F1;
            }
            11 => {
                return crate::api::syste::LddKey::F10;
            }
            12 => {
                return crate::api::syste::LddKey::F11;
            }
            13 => {
                return crate::api::syste::LddKey::F12;
            }
            14 => {
                return crate::api::syste::LddKey::F2;
            }
            15 => {
                return crate::api::syste::LddKey::F3;
            }
            16 => {
                return crate::api::syste::LddKey::F4;
            }
            17 => {
                return crate::api::syste::LddKey::F5;
            }
            18 => {
                return crate::api::syste::LddKey::F6;
            }
            19 => {
                return crate::api::syste::LddKey::F7;
            }
            20 => {
                return crate::api::syste::LddKey::F8;
            }
            21 => {
                return crate::api::syste::LddKey::F9;
            }
            22 => {
                return crate::api::syste::LddKey::Home;
            }
            23 => {
                return crate::api::syste::LddKey::LeftArrow;
            }
            24 => {
                return crate::api::syste::LddKey::MetaLeft;
            }
            25 => {
                return crate::api::syste::LddKey::MetaRight;
            }
            26 => {
                return crate::api::syste::LddKey::PageDown;
            }
            27 => {
                return crate::api::syste::LddKey::PageUp;
            }
            28 => {
                return crate::api::syste::LddKey::Return;
            }
            29 => {
                return crate::api::syste::LddKey::RightArrow;
            }
            30 => {
                return crate::api::syste::LddKey::ShiftLeft;
            }
            31 => {
                return crate::api::syste::LddKey::ShiftRight;
            }
            32 => {
                return crate::api::syste::LddKey::Space;
            }
            33 => {
                return crate::api::syste::LddKey::Tab;
            }
            34 => {
                return crate::api::syste::LddKey::UpArrow;
            }
            35 => {
                return crate::api::syste::LddKey::PrintScreen;
            }
            36 => {
                return crate::api::syste::LddKey::ScrollLock;
            }
            37 => {
                return crate::api::syste::LddKey::Pause;
            }
            38 => {
                return crate::api::syste::LddKey::NumLock;
            }
            39 => {
                return crate::api::syste::LddKey::BackQuote;
            }
            40 => {
                return crate::api::syste::LddKey::Num1;
            }
            41 => {
                return crate::api::syste::LddKey::Num2;
            }
            42 => {
                return crate::api::syste::LddKey::Num3;
            }
            43 => {
                return crate::api::syste::LddKey::Num4;
            }
            44 => {
                return crate::api::syste::LddKey::Num5;
            }
            45 => {
                return crate::api::syste::LddKey::Num6;
            }
            46 => {
                return crate::api::syste::LddKey::Num7;
            }
            47 => {
                return crate::api::syste::LddKey::Num8;
            }
            48 => {
                return crate::api::syste::LddKey::Num9;
            }
            49 => {
                return crate::api::syste::LddKey::Num0;
            }
            50 => {
                return crate::api::syste::LddKey::Minus;
            }
            51 => {
                return crate::api::syste::LddKey::Equal;
            }
            52 => {
                return crate::api::syste::LddKey::KeyQ;
            }
            53 => {
                return crate::api::syste::LddKey::KeyW;
            }
            54 => {
                return crate::api::syste::LddKey::KeyE;
            }
            55 => {
                return crate::api::syste::LddKey::KeyR;
            }
            56 => {
                return crate::api::syste::LddKey::KeyT;
            }
            57 => {
                return crate::api::syste::LddKey::KeyY;
            }
            58 => {
                return crate::api::syste::LddKey::KeyU;
            }
            59 => {
                return crate::api::syste::LddKey::KeyI;
            }
            60 => {
                return crate::api::syste::LddKey::KeyO;
            }
            61 => {
                return crate::api::syste::LddKey::KeyP;
            }
            62 => {
                return crate::api::syste::LddKey::LeftBracket;
            }
            63 => {
                return crate::api::syste::LddKey::RightBracket;
            }
            64 => {
                return crate::api::syste::LddKey::KeyA;
            }
            65 => {
                return crate::api::syste::LddKey::KeyS;
            }
            66 => {
                return crate::api::syste::LddKey::KeyD;
            }
            67 => {
                return crate::api::syste::LddKey::KeyF;
            }
            68 => {
                return crate::api::syste::LddKey::KeyG;
            }
            69 => {
                return crate::api::syste::LddKey::KeyH;
            }
            70 => {
                return crate::api::syste::LddKey::KeyJ;
            }
            71 => {
                return crate::api::syste::LddKey::KeyK;
            }
            72 => {
                return crate::api::syste::LddKey::KeyL;
            }
            73 => {
                return crate::api::syste::LddKey::SemiColon;
            }
            74 => {
                return crate::api::syste::LddKey::Quote;
            }
            75 => {
                return crate::api::syste::LddKey::BackSlash;
            }
            76 => {
                return crate::api::syste::LddKey::IntlBackslash;
            }
            77 => {
                return crate::api::syste::LddKey::KeyZ;
            }
            78 => {
                return crate::api::syste::LddKey::KeyX;
            }
            79 => {
                return crate::api::syste::LddKey::KeyC;
            }
            80 => {
                return crate::api::syste::LddKey::KeyV;
            }
            81 => {
                return crate::api::syste::LddKey::KeyB;
            }
            82 => {
                return crate::api::syste::LddKey::KeyN;
            }
            83 => {
                return crate::api::syste::LddKey::KeyM;
            }
            84 => {
                return crate::api::syste::LddKey::Comma;
            }
            85 => {
                return crate::api::syste::LddKey::Dot;
            }
            86 => {
                return crate::api::syste::LddKey::Slash;
            }
            87 => {
                return crate::api::syste::LddKey::Insert;
            }
            88 => {
                return crate::api::syste::LddKey::KpReturn;
            }
            89 => {
                return crate::api::syste::LddKey::KpMinus;
            }
            90 => {
                return crate::api::syste::LddKey::KpPlus;
            }
            91 => {
                return crate::api::syste::LddKey::KpMultiply;
            }
            92 => {
                return crate::api::syste::LddKey::KpDivide;
            }
            93 => {
                return crate::api::syste::LddKey::Kp0;
            }
            94 => {
                return crate::api::syste::LddKey::Kp1;
            }
            95 => {
                return crate::api::syste::LddKey::Kp2;
            }
            96 => {
                return crate::api::syste::LddKey::Kp3;
            }
            97 => {
                return crate::api::syste::LddKey::Kp4;
            }
            98 => {
                return crate::api::syste::LddKey::Kp5;
            }
            99 => {
                return crate::api::syste::LddKey::Kp6;
            }
            100 => {
                return crate::api::syste::LddKey::Kp7;
            }
            101 => {
                return crate::api::syste::LddKey::Kp8;
            }
            102 => {
                return crate::api::syste::LddKey::Kp9;
            }
            103 => {
                return crate::api::syste::LddKey::KpDelete;
            }
            104 => {
                return crate::api::syste::LddKey::Function;
            }
            105 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::syste::LddKey::Unknown(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::entitys::LddKeyId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::entitys::LddKeyId::Escape,
            1 => crate::api::entitys::LddKeyId::Return,
            2 => crate::api::entitys::LddKeyId::Backspace,
            3 => crate::api::entitys::LddKeyId::Left,
            4 => crate::api::entitys::LddKeyId::Right,
            5 => crate::api::entitys::LddKeyId::Up,
            6 => crate::api::entitys::LddKeyId::Down,
            7 => crate::api::entitys::LddKeyId::Space,
            8 => crate::api::entitys::LddKeyId::A,
            9 => crate::api::entitys::LddKeyId::B,
            10 => crate::api::entitys::LddKeyId::C,
            11 => crate::api::entitys::LddKeyId::D,
            12 => crate::api::entitys::LddKeyId::E,
            13 => crate::api::entitys::LddKeyId::F,
            14 => crate::api::entitys::LddKeyId::G,
            15 => crate::api::entitys::LddKeyId::H,
            16 => crate::api::entitys::LddKeyId::I,
            17 => crate::api::entitys::LddKeyId::J,
            18 => crate::api::entitys::LddKeyId::K,
            19 => crate::api::entitys::LddKeyId::L,
            20 => crate::api::entitys::LddKeyId::M,
            21 => crate::api::entitys::LddKeyId::N,
            22 => crate::api::entitys::LddKeyId::O,
            23 => crate::api::entitys::LddKeyId::P,
            24 => crate::api::entitys::LddKeyId::Q,
            25 => crate::api::entitys::LddKeyId::R,
            26 => crate::api::entitys::LddKeyId::S,
            27 => crate::api::entitys::LddKeyId::T,
            28 => crate::api::entitys::LddKeyId::U,
            29 => crate::api::entitys::LddKeyId::V,
            30 => crate::api::entitys::LddKeyId::W,
            31 => crate::api::entitys::LddKeyId::X,
            32 => crate::api::entitys::LddKeyId::Y,
            33 => crate::api::entitys::LddKeyId::Z,
            34 => crate::api::entitys::LddKeyId::F1,
            35 => crate::api::entitys::LddKeyId::F2,
            36 => crate::api::entitys::LddKeyId::F3,
            37 => crate::api::entitys::LddKeyId::F4,
            38 => crate::api::entitys::LddKeyId::F5,
            39 => crate::api::entitys::LddKeyId::F6,
            40 => crate::api::entitys::LddKeyId::F7,
            41 => crate::api::entitys::LddKeyId::F8,
            42 => crate::api::entitys::LddKeyId::F9,
            43 => crate::api::entitys::LddKeyId::F10,
            44 => crate::api::entitys::LddKeyId::F11,
            45 => crate::api::entitys::LddKeyId::F12,
            46 => crate::api::entitys::LddKeyId::Zero,
            47 => crate::api::entitys::LddKeyId::One,
            48 => crate::api::entitys::LddKeyId::Two,
            49 => crate::api::entitys::LddKeyId::Three,
            50 => crate::api::entitys::LddKeyId::Four,
            51 => crate::api::entitys::LddKeyId::Five,
            52 => crate::api::entitys::LddKeyId::Six,
            53 => crate::api::entitys::LddKeyId::Seven,
            54 => crate::api::entitys::LddKeyId::Eight,
            55 => crate::api::entitys::LddKeyId::Nine,
            56 => crate::api::entitys::LddKeyId::Shift,
            57 => crate::api::entitys::LddKeyId::LeftCtrl,
            58 => crate::api::entitys::LddKeyId::RightCtrl,
            59 => crate::api::entitys::LddKeyId::LeftAlt,
            60 => crate::api::entitys::LddKeyId::RightAlt,
            61 => crate::api::entitys::LddKeyId::CapsLock,
            62 => crate::api::entitys::LddKeyId::Pause,
            63 => crate::api::entitys::LddKeyId::PageUp,
            64 => crate::api::entitys::LddKeyId::PageDown,
            65 => crate::api::entitys::LddKeyId::PrintScreen,
            66 => crate::api::entitys::LddKeyId::Insert,
            67 => crate::api::entitys::LddKeyId::End,
            68 => crate::api::entitys::LddKeyId::Home,
            69 => crate::api::entitys::LddKeyId::Delete,
            70 => crate::api::entitys::LddKeyId::Add,
            71 => crate::api::entitys::LddKeyId::Subtract,
            72 => crate::api::entitys::LddKeyId::Multiply,
            73 => crate::api::entitys::LddKeyId::Separator,
            74 => crate::api::entitys::LddKeyId::Decimal,
            75 => crate::api::entitys::LddKeyId::Divide,
            76 => crate::api::entitys::LddKeyId::BackTick,
            77 => crate::api::entitys::LddKeyId::BackSlash,
            78 => crate::api::entitys::LddKeyId::ForwardSlash,
            79 => crate::api::entitys::LddKeyId::Plus,
            80 => crate::api::entitys::LddKeyId::Minus,
            81 => crate::api::entitys::LddKeyId::FullStop,
            82 => crate::api::entitys::LddKeyId::Comma,
            83 => crate::api::entitys::LddKeyId::Tab,
            84 => crate::api::entitys::LddKeyId::Numlock,
            85 => crate::api::entitys::LddKeyId::LeftSquareBracket,
            86 => crate::api::entitys::LddKeyId::RightSquareBracket,
            87 => crate::api::entitys::LddKeyId::SemiColon,
            88 => crate::api::entitys::LddKeyId::Apostrophe,
            89 => crate::api::entitys::LddKeyId::Hash,
            90 => crate::api::entitys::LddKeyId::NumPad0,
            91 => crate::api::entitys::LddKeyId::NumPad1,
            92 => crate::api::entitys::LddKeyId::NumPad2,
            93 => crate::api::entitys::LddKeyId::NumPad3,
            94 => crate::api::entitys::LddKeyId::NumPad4,
            95 => crate::api::entitys::LddKeyId::NumPad5,
            96 => crate::api::entitys::LddKeyId::NumPad6,
            97 => crate::api::entitys::LddKeyId::NumPad7,
            98 => crate::api::entitys::LddKeyId::NumPad8,
            99 => crate::api::entitys::LddKeyId::NumPad9,
            _ => unreachable!("Invalid variant for LddKeyId: {}", inner),
        };
    }
}

impl SseDecode for crate::api::entitys::LddKeyboard {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_serial = <Option<String>>::sse_decode(deserializer);
        return crate::api::entitys::LddKeyboard {
            name: var_name,
            serial: var_serial,
        };
    }
}

impl SseDecode for crate::api::syste::LddKeyboardValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                let mut var_field1 = <u128>::sse_decode(deserializer);
                return crate::api::syste::LddKeyboardValue::ScanGunValue(var_field0, var_field1);
            }
            1 => {
                let mut var_field0 = <crate::api::syste::LddEvent>::sse_decode(deserializer);
                let mut var_field1 = <u128>::sse_decode(deserializer);
                return crate::api::syste::LddKeyboardValue::KeyboardValue(var_field0, var_field1);
            }
            2 => {
                let mut var_field0 = <Vec<crate::api::syste::LddEvent>>::sse_decode(deserializer);
                return crate::api::syste::LddKeyboardValue::ScanGunValueV2(var_field0);
            }
            3 => {
                let mut var_field0 = <crate::api::syste::LddEvent>::sse_decode(deserializer);
                return crate::api::syste::LddKeyboardValue::KeyboardValueV2(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::entitys::LddRawEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <usize>::sse_decode(deserializer);
                let mut var_field1 = <crate::api::entitys::LddKeyId>::sse_decode(deserializer);
                let mut var_field2 = <crate::api::entitys::LddState>::sse_decode(deserializer);
                let mut var_field3 = <crate::api::entitys::LddKeyboard>::sse_decode(deserializer);
                return crate::api::entitys::LddRawEvent::LddKeyboardEvent(
                    var_field0, var_field1, var_field2, var_field3,
                );
            }
            1 => {
                let mut var_field0 = <Vec<crate::api::entitys::LddKeyId>>::sse_decode(deserializer);
                let mut var_field1 = <crate::api::entitys::LddKeyboard>::sse_decode(deserializer);
                return crate::api::entitys::LddRawEvent::ScanGunEvent(var_field0, var_field1);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::entitys::LddState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::entitys::LddState::Pressed,
            1 => crate::api::entitys::LddState::Released,
            _ => unreachable!("Invalid variant for LddState: {}", inner),
        };
    }
}

impl SseDecode for Vec<crate::api::syste::LddEvent> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::syste::LddEvent>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::entitys::LddKeyId> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::entitys::LddKeyId>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::entitys::LddKeyboard> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::entitys::LddKeyboard>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::entitys::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_timeMillis = <i64>::sse_decode(deserializer);
        let mut var_level = <i32>::sse_decode(deserializer);
        let mut var_tag = <String>::sse_decode(deserializer);
        let mut var_msg = <String>::sse_decode(deserializer);
        return crate::api::entitys::LogEntry {
            time_millis: var_timeMillis,
            level: var_level,
            tag: var_tag,
            msg: var_msg,
        };
    }
}

impl SseDecode for crate::api::logger::MyMobileLogger {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::logger::MyMobileLogger {};
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::entitys::LddKeyboard> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::entitys::LddKeyboard>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<usize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::logger::SendToDartLogger {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::logger::SendToDartLogger {};
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        3 => {
            wire__crate__api__keyboard_listen__start_listen_impl(port, ptr, rust_vec_len, data_len)
        }
        4 => wire__crate__api__logger__create_log_stream_impl(port, ptr, rust_vec_len, data_len),
        5 => wire__crate__api__logger__init_logger_impl(port, ptr, rust_vec_len, data_len),
        6 => wire__crate__api__logger__my_mobile_logger_new_impl(port, ptr, rust_vec_len, data_len),
        7 => wire__crate__api__logger__rust_set_up_impl(port, ptr, rust_vec_len, data_len),
        8 => wire__crate__api__logger__send_to_dart_logger_new_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        9 => wire__crate__api__logger__send_to_dart_logger_set_stream_sink_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        11 => wire__crate__api__multiinput__LddKeyboardManager_listen_ldd_keyboard_event_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        14 => wire__crate__api__syste__start_listen_system_event_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        15 => wire__crate__api__syste__start_listen_systen_event_by_ldd_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => {
            wire__crate__api__entitys__ldd_key_id_key_id_to_string_impl(ptr, rust_vec_len, data_len)
        }
        2 => wire__crate__api__entitys__ldd_state_format_string_impl(ptr, rust_vec_len, data_len),
        10 => wire__crate__api__multiinput__LddKeyboardManager_get_ldd_keyboard_list_impl(
            ptr,
            rust_vec_len,
            data_len,
        ),
        12 => {
            wire__crate__api__multiinput__LddKeyboardManager_new_impl(ptr, rust_vec_len, data_len)
        }
        13 => wire__crate__api__multiinput__LddKeyboardManager_register_impl(
            ptr,
            rust_vec_len,
            data_len,
        ),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<LddKeyboardManager> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<LddKeyboardManager>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<LddKeyboardManager>> for LddKeyboardManager {
    fn into_into_dart(self) -> FrbWrapper<LddKeyboardManager> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::syste::LddButton {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::syste::LddButton::Left => [0.into_dart()].into_dart(),
            crate::api::syste::LddButton::Right => [1.into_dart()].into_dart(),
            crate::api::syste::LddButton::Middle => [2.into_dart()].into_dart(),
            crate::api::syste::LddButton::Unknown(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::syste::LddButton {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::syste::LddButton>
    for crate::api::syste::LddButton
{
    fn into_into_dart(self) -> crate::api::syste::LddButton {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::syste::LddEvent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.event_type.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::syste::LddEvent {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::syste::LddEvent>
    for crate::api::syste::LddEvent
{
    fn into_into_dart(self) -> crate::api::syste::LddEvent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::syste::LddEventType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::syste::LddEventType::KeyPress(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::syste::LddEventType::KeyRelease(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::syste::LddEventType::ButtonPress(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::syste::LddEventType::ButtonRelease(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::syste::LddEventType::MouseMove { x, y } => [
                4.into_dart(),
                x.into_into_dart().into_dart(),
                y.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::syste::LddEventType::Wheel { delta_x, delta_y } => [
                5.into_dart(),
                delta_x.into_into_dart().into_dart(),
                delta_y.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::syste::LddEventType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::syste::LddEventType>
    for crate::api::syste::LddEventType
{
    fn into_into_dart(self) -> crate::api::syste::LddEventType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::syste::LddKey {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::syste::LddKey::Alt => [0.into_dart()].into_dart(),
            crate::api::syste::LddKey::AltGr => [1.into_dart()].into_dart(),
            crate::api::syste::LddKey::Backspace => [2.into_dart()].into_dart(),
            crate::api::syste::LddKey::CapsLock => [3.into_dart()].into_dart(),
            crate::api::syste::LddKey::ControlLeft => [4.into_dart()].into_dart(),
            crate::api::syste::LddKey::ControlRight => [5.into_dart()].into_dart(),
            crate::api::syste::LddKey::Delete => [6.into_dart()].into_dart(),
            crate::api::syste::LddKey::DownArrow => [7.into_dart()].into_dart(),
            crate::api::syste::LddKey::End => [8.into_dart()].into_dart(),
            crate::api::syste::LddKey::Escape => [9.into_dart()].into_dart(),
            crate::api::syste::LddKey::F1 => [10.into_dart()].into_dart(),
            crate::api::syste::LddKey::F10 => [11.into_dart()].into_dart(),
            crate::api::syste::LddKey::F11 => [12.into_dart()].into_dart(),
            crate::api::syste::LddKey::F12 => [13.into_dart()].into_dart(),
            crate::api::syste::LddKey::F2 => [14.into_dart()].into_dart(),
            crate::api::syste::LddKey::F3 => [15.into_dart()].into_dart(),
            crate::api::syste::LddKey::F4 => [16.into_dart()].into_dart(),
            crate::api::syste::LddKey::F5 => [17.into_dart()].into_dart(),
            crate::api::syste::LddKey::F6 => [18.into_dart()].into_dart(),
            crate::api::syste::LddKey::F7 => [19.into_dart()].into_dart(),
            crate::api::syste::LddKey::F8 => [20.into_dart()].into_dart(),
            crate::api::syste::LddKey::F9 => [21.into_dart()].into_dart(),
            crate::api::syste::LddKey::Home => [22.into_dart()].into_dart(),
            crate::api::syste::LddKey::LeftArrow => [23.into_dart()].into_dart(),
            crate::api::syste::LddKey::MetaLeft => [24.into_dart()].into_dart(),
            crate::api::syste::LddKey::MetaRight => [25.into_dart()].into_dart(),
            crate::api::syste::LddKey::PageDown => [26.into_dart()].into_dart(),
            crate::api::syste::LddKey::PageUp => [27.into_dart()].into_dart(),
            crate::api::syste::LddKey::Return => [28.into_dart()].into_dart(),
            crate::api::syste::LddKey::RightArrow => [29.into_dart()].into_dart(),
            crate::api::syste::LddKey::ShiftLeft => [30.into_dart()].into_dart(),
            crate::api::syste::LddKey::ShiftRight => [31.into_dart()].into_dart(),
            crate::api::syste::LddKey::Space => [32.into_dart()].into_dart(),
            crate::api::syste::LddKey::Tab => [33.into_dart()].into_dart(),
            crate::api::syste::LddKey::UpArrow => [34.into_dart()].into_dart(),
            crate::api::syste::LddKey::PrintScreen => [35.into_dart()].into_dart(),
            crate::api::syste::LddKey::ScrollLock => [36.into_dart()].into_dart(),
            crate::api::syste::LddKey::Pause => [37.into_dart()].into_dart(),
            crate::api::syste::LddKey::NumLock => [38.into_dart()].into_dart(),
            crate::api::syste::LddKey::BackQuote => [39.into_dart()].into_dart(),
            crate::api::syste::LddKey::Num1 => [40.into_dart()].into_dart(),
            crate::api::syste::LddKey::Num2 => [41.into_dart()].into_dart(),
            crate::api::syste::LddKey::Num3 => [42.into_dart()].into_dart(),
            crate::api::syste::LddKey::Num4 => [43.into_dart()].into_dart(),
            crate::api::syste::LddKey::Num5 => [44.into_dart()].into_dart(),
            crate::api::syste::LddKey::Num6 => [45.into_dart()].into_dart(),
            crate::api::syste::LddKey::Num7 => [46.into_dart()].into_dart(),
            crate::api::syste::LddKey::Num8 => [47.into_dart()].into_dart(),
            crate::api::syste::LddKey::Num9 => [48.into_dart()].into_dart(),
            crate::api::syste::LddKey::Num0 => [49.into_dart()].into_dart(),
            crate::api::syste::LddKey::Minus => [50.into_dart()].into_dart(),
            crate::api::syste::LddKey::Equal => [51.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyQ => [52.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyW => [53.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyE => [54.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyR => [55.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyT => [56.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyY => [57.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyU => [58.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyI => [59.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyO => [60.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyP => [61.into_dart()].into_dart(),
            crate::api::syste::LddKey::LeftBracket => [62.into_dart()].into_dart(),
            crate::api::syste::LddKey::RightBracket => [63.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyA => [64.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyS => [65.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyD => [66.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyF => [67.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyG => [68.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyH => [69.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyJ => [70.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyK => [71.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyL => [72.into_dart()].into_dart(),
            crate::api::syste::LddKey::SemiColon => [73.into_dart()].into_dart(),
            crate::api::syste::LddKey::Quote => [74.into_dart()].into_dart(),
            crate::api::syste::LddKey::BackSlash => [75.into_dart()].into_dart(),
            crate::api::syste::LddKey::IntlBackslash => [76.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyZ => [77.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyX => [78.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyC => [79.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyV => [80.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyB => [81.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyN => [82.into_dart()].into_dart(),
            crate::api::syste::LddKey::KeyM => [83.into_dart()].into_dart(),
            crate::api::syste::LddKey::Comma => [84.into_dart()].into_dart(),
            crate::api::syste::LddKey::Dot => [85.into_dart()].into_dart(),
            crate::api::syste::LddKey::Slash => [86.into_dart()].into_dart(),
            crate::api::syste::LddKey::Insert => [87.into_dart()].into_dart(),
            crate::api::syste::LddKey::KpReturn => [88.into_dart()].into_dart(),
            crate::api::syste::LddKey::KpMinus => [89.into_dart()].into_dart(),
            crate::api::syste::LddKey::KpPlus => [90.into_dart()].into_dart(),
            crate::api::syste::LddKey::KpMultiply => [91.into_dart()].into_dart(),
            crate::api::syste::LddKey::KpDivide => [92.into_dart()].into_dart(),
            crate::api::syste::LddKey::Kp0 => [93.into_dart()].into_dart(),
            crate::api::syste::LddKey::Kp1 => [94.into_dart()].into_dart(),
            crate::api::syste::LddKey::Kp2 => [95.into_dart()].into_dart(),
            crate::api::syste::LddKey::Kp3 => [96.into_dart()].into_dart(),
            crate::api::syste::LddKey::Kp4 => [97.into_dart()].into_dart(),
            crate::api::syste::LddKey::Kp5 => [98.into_dart()].into_dart(),
            crate::api::syste::LddKey::Kp6 => [99.into_dart()].into_dart(),
            crate::api::syste::LddKey::Kp7 => [100.into_dart()].into_dart(),
            crate::api::syste::LddKey::Kp8 => [101.into_dart()].into_dart(),
            crate::api::syste::LddKey::Kp9 => [102.into_dart()].into_dart(),
            crate::api::syste::LddKey::KpDelete => [103.into_dart()].into_dart(),
            crate::api::syste::LddKey::Function => [104.into_dart()].into_dart(),
            crate::api::syste::LddKey::Unknown(field0) => {
                [105.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::syste::LddKey {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::syste::LddKey> for crate::api::syste::LddKey {
    fn into_into_dart(self) -> crate::api::syste::LddKey {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entitys::LddKeyId {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Escape => 0.into_dart(),
            Self::Return => 1.into_dart(),
            Self::Backspace => 2.into_dart(),
            Self::Left => 3.into_dart(),
            Self::Right => 4.into_dart(),
            Self::Up => 5.into_dart(),
            Self::Down => 6.into_dart(),
            Self::Space => 7.into_dart(),
            Self::A => 8.into_dart(),
            Self::B => 9.into_dart(),
            Self::C => 10.into_dart(),
            Self::D => 11.into_dart(),
            Self::E => 12.into_dart(),
            Self::F => 13.into_dart(),
            Self::G => 14.into_dart(),
            Self::H => 15.into_dart(),
            Self::I => 16.into_dart(),
            Self::J => 17.into_dart(),
            Self::K => 18.into_dart(),
            Self::L => 19.into_dart(),
            Self::M => 20.into_dart(),
            Self::N => 21.into_dart(),
            Self::O => 22.into_dart(),
            Self::P => 23.into_dart(),
            Self::Q => 24.into_dart(),
            Self::R => 25.into_dart(),
            Self::S => 26.into_dart(),
            Self::T => 27.into_dart(),
            Self::U => 28.into_dart(),
            Self::V => 29.into_dart(),
            Self::W => 30.into_dart(),
            Self::X => 31.into_dart(),
            Self::Y => 32.into_dart(),
            Self::Z => 33.into_dart(),
            Self::F1 => 34.into_dart(),
            Self::F2 => 35.into_dart(),
            Self::F3 => 36.into_dart(),
            Self::F4 => 37.into_dart(),
            Self::F5 => 38.into_dart(),
            Self::F6 => 39.into_dart(),
            Self::F7 => 40.into_dart(),
            Self::F8 => 41.into_dart(),
            Self::F9 => 42.into_dart(),
            Self::F10 => 43.into_dart(),
            Self::F11 => 44.into_dart(),
            Self::F12 => 45.into_dart(),
            Self::Zero => 46.into_dart(),
            Self::One => 47.into_dart(),
            Self::Two => 48.into_dart(),
            Self::Three => 49.into_dart(),
            Self::Four => 50.into_dart(),
            Self::Five => 51.into_dart(),
            Self::Six => 52.into_dart(),
            Self::Seven => 53.into_dart(),
            Self::Eight => 54.into_dart(),
            Self::Nine => 55.into_dart(),
            Self::Shift => 56.into_dart(),
            Self::LeftCtrl => 57.into_dart(),
            Self::RightCtrl => 58.into_dart(),
            Self::LeftAlt => 59.into_dart(),
            Self::RightAlt => 60.into_dart(),
            Self::CapsLock => 61.into_dart(),
            Self::Pause => 62.into_dart(),
            Self::PageUp => 63.into_dart(),
            Self::PageDown => 64.into_dart(),
            Self::PrintScreen => 65.into_dart(),
            Self::Insert => 66.into_dart(),
            Self::End => 67.into_dart(),
            Self::Home => 68.into_dart(),
            Self::Delete => 69.into_dart(),
            Self::Add => 70.into_dart(),
            Self::Subtract => 71.into_dart(),
            Self::Multiply => 72.into_dart(),
            Self::Separator => 73.into_dart(),
            Self::Decimal => 74.into_dart(),
            Self::Divide => 75.into_dart(),
            Self::BackTick => 76.into_dart(),
            Self::BackSlash => 77.into_dart(),
            Self::ForwardSlash => 78.into_dart(),
            Self::Plus => 79.into_dart(),
            Self::Minus => 80.into_dart(),
            Self::FullStop => 81.into_dart(),
            Self::Comma => 82.into_dart(),
            Self::Tab => 83.into_dart(),
            Self::Numlock => 84.into_dart(),
            Self::LeftSquareBracket => 85.into_dart(),
            Self::RightSquareBracket => 86.into_dart(),
            Self::SemiColon => 87.into_dart(),
            Self::Apostrophe => 88.into_dart(),
            Self::Hash => 89.into_dart(),
            Self::NumPad0 => 90.into_dart(),
            Self::NumPad1 => 91.into_dart(),
            Self::NumPad2 => 92.into_dart(),
            Self::NumPad3 => 93.into_dart(),
            Self::NumPad4 => 94.into_dart(),
            Self::NumPad5 => 95.into_dart(),
            Self::NumPad6 => 96.into_dart(),
            Self::NumPad7 => 97.into_dart(),
            Self::NumPad8 => 98.into_dart(),
            Self::NumPad9 => 99.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::entitys::LddKeyId {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entitys::LddKeyId>
    for crate::api::entitys::LddKeyId
{
    fn into_into_dart(self) -> crate::api::entitys::LddKeyId {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entitys::LddKeyboard {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.serial.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entitys::LddKeyboard
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entitys::LddKeyboard>
    for crate::api::entitys::LddKeyboard
{
    fn into_into_dart(self) -> crate::api::entitys::LddKeyboard {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::syste::LddKeyboardValue {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::syste::LddKeyboardValue::ScanGunValue(field0, field1) => [
                0.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::syste::LddKeyboardValue::KeyboardValue(field0, field1) => [
                1.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::syste::LddKeyboardValue::ScanGunValueV2(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::syste::LddKeyboardValue::KeyboardValueV2(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::syste::LddKeyboardValue
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::syste::LddKeyboardValue>
    for crate::api::syste::LddKeyboardValue
{
    fn into_into_dart(self) -> crate::api::syste::LddKeyboardValue {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entitys::LddRawEvent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::entitys::LddRawEvent::LddKeyboardEvent(field0, field1, field2, field3) => [
                0.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
                field2.into_into_dart().into_dart(),
                field3.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::entitys::LddRawEvent::ScanGunEvent(field0, field1) => [
                1.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::entitys::LddRawEvent
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entitys::LddRawEvent>
    for crate::api::entitys::LddRawEvent
{
    fn into_into_dart(self) -> crate::api::entitys::LddRawEvent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entitys::LddState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Pressed => 0.into_dart(),
            Self::Released => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::entitys::LddState {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entitys::LddState>
    for crate::api::entitys::LddState
{
    fn into_into_dart(self) -> crate::api::entitys::LddState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::entitys::LogEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.time_millis.into_into_dart().into_dart(),
            self.level.into_into_dart().into_dart(),
            self.tag.into_into_dart().into_dart(),
            self.msg.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::entitys::LogEntry {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::entitys::LogEntry>
    for crate::api::entitys::LogEntry
{
    fn into_into_dart(self) -> crate::api::entitys::LogEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::logger::MyMobileLogger {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::logger::MyMobileLogger
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::logger::MyMobileLogger>
    for crate::api::logger::MyMobileLogger
{
    fn into_into_dart(self) -> crate::api::logger::MyMobileLogger {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::logger::SendToDartLogger {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::logger::SendToDartLogger
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::logger::SendToDartLogger>
    for crate::api::logger::SendToDartLogger
{
    fn into_into_dart(self) -> crate::api::logger::SendToDartLogger {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for LddKeyboardManager {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddKeyboardManager>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddKeyboardManager>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for StreamSink<crate::api::syste::LddEvent, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<
        crate::api::syste::LddKeyboardValue,
        flutter_rust_bridge::for_generated::SseCodec,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<crate::api::entitys::LddRawEvent, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<crate::api::entitys::LogEntry, flutter_rust_bridge::for_generated::SseCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for u128 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.to_string(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::syste::LddButton {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::syste::LddButton::Left => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::syste::LddButton::Right => {
                <i32>::sse_encode(1, serializer);
            }
            crate::api::syste::LddButton::Middle => {
                <i32>::sse_encode(2, serializer);
            }
            crate::api::syste::LddButton::Unknown(field0) => {
                <i32>::sse_encode(3, serializer);
                <u8>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::syste::LddEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.name, serializer);
        <crate::api::syste::LddEventType>::sse_encode(self.event_type, serializer);
    }
}

impl SseEncode for crate::api::syste::LddEventType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::syste::LddEventType::KeyPress(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::syste::LddKey>::sse_encode(field0, serializer);
            }
            crate::api::syste::LddEventType::KeyRelease(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::syste::LddKey>::sse_encode(field0, serializer);
            }
            crate::api::syste::LddEventType::ButtonPress(field0) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::syste::LddButton>::sse_encode(field0, serializer);
            }
            crate::api::syste::LddEventType::ButtonRelease(field0) => {
                <i32>::sse_encode(3, serializer);
                <crate::api::syste::LddButton>::sse_encode(field0, serializer);
            }
            crate::api::syste::LddEventType::MouseMove { x, y } => {
                <i32>::sse_encode(4, serializer);
                <f64>::sse_encode(x, serializer);
                <f64>::sse_encode(y, serializer);
            }
            crate::api::syste::LddEventType::Wheel { delta_x, delta_y } => {
                <i32>::sse_encode(5, serializer);
                <i64>::sse_encode(delta_x, serializer);
                <i64>::sse_encode(delta_y, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::syste::LddKey {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::syste::LddKey::Alt => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::syste::LddKey::AltGr => {
                <i32>::sse_encode(1, serializer);
            }
            crate::api::syste::LddKey::Backspace => {
                <i32>::sse_encode(2, serializer);
            }
            crate::api::syste::LddKey::CapsLock => {
                <i32>::sse_encode(3, serializer);
            }
            crate::api::syste::LddKey::ControlLeft => {
                <i32>::sse_encode(4, serializer);
            }
            crate::api::syste::LddKey::ControlRight => {
                <i32>::sse_encode(5, serializer);
            }
            crate::api::syste::LddKey::Delete => {
                <i32>::sse_encode(6, serializer);
            }
            crate::api::syste::LddKey::DownArrow => {
                <i32>::sse_encode(7, serializer);
            }
            crate::api::syste::LddKey::End => {
                <i32>::sse_encode(8, serializer);
            }
            crate::api::syste::LddKey::Escape => {
                <i32>::sse_encode(9, serializer);
            }
            crate::api::syste::LddKey::F1 => {
                <i32>::sse_encode(10, serializer);
            }
            crate::api::syste::LddKey::F10 => {
                <i32>::sse_encode(11, serializer);
            }
            crate::api::syste::LddKey::F11 => {
                <i32>::sse_encode(12, serializer);
            }
            crate::api::syste::LddKey::F12 => {
                <i32>::sse_encode(13, serializer);
            }
            crate::api::syste::LddKey::F2 => {
                <i32>::sse_encode(14, serializer);
            }
            crate::api::syste::LddKey::F3 => {
                <i32>::sse_encode(15, serializer);
            }
            crate::api::syste::LddKey::F4 => {
                <i32>::sse_encode(16, serializer);
            }
            crate::api::syste::LddKey::F5 => {
                <i32>::sse_encode(17, serializer);
            }
            crate::api::syste::LddKey::F6 => {
                <i32>::sse_encode(18, serializer);
            }
            crate::api::syste::LddKey::F7 => {
                <i32>::sse_encode(19, serializer);
            }
            crate::api::syste::LddKey::F8 => {
                <i32>::sse_encode(20, serializer);
            }
            crate::api::syste::LddKey::F9 => {
                <i32>::sse_encode(21, serializer);
            }
            crate::api::syste::LddKey::Home => {
                <i32>::sse_encode(22, serializer);
            }
            crate::api::syste::LddKey::LeftArrow => {
                <i32>::sse_encode(23, serializer);
            }
            crate::api::syste::LddKey::MetaLeft => {
                <i32>::sse_encode(24, serializer);
            }
            crate::api::syste::LddKey::MetaRight => {
                <i32>::sse_encode(25, serializer);
            }
            crate::api::syste::LddKey::PageDown => {
                <i32>::sse_encode(26, serializer);
            }
            crate::api::syste::LddKey::PageUp => {
                <i32>::sse_encode(27, serializer);
            }
            crate::api::syste::LddKey::Return => {
                <i32>::sse_encode(28, serializer);
            }
            crate::api::syste::LddKey::RightArrow => {
                <i32>::sse_encode(29, serializer);
            }
            crate::api::syste::LddKey::ShiftLeft => {
                <i32>::sse_encode(30, serializer);
            }
            crate::api::syste::LddKey::ShiftRight => {
                <i32>::sse_encode(31, serializer);
            }
            crate::api::syste::LddKey::Space => {
                <i32>::sse_encode(32, serializer);
            }
            crate::api::syste::LddKey::Tab => {
                <i32>::sse_encode(33, serializer);
            }
            crate::api::syste::LddKey::UpArrow => {
                <i32>::sse_encode(34, serializer);
            }
            crate::api::syste::LddKey::PrintScreen => {
                <i32>::sse_encode(35, serializer);
            }
            crate::api::syste::LddKey::ScrollLock => {
                <i32>::sse_encode(36, serializer);
            }
            crate::api::syste::LddKey::Pause => {
                <i32>::sse_encode(37, serializer);
            }
            crate::api::syste::LddKey::NumLock => {
                <i32>::sse_encode(38, serializer);
            }
            crate::api::syste::LddKey::BackQuote => {
                <i32>::sse_encode(39, serializer);
            }
            crate::api::syste::LddKey::Num1 => {
                <i32>::sse_encode(40, serializer);
            }
            crate::api::syste::LddKey::Num2 => {
                <i32>::sse_encode(41, serializer);
            }
            crate::api::syste::LddKey::Num3 => {
                <i32>::sse_encode(42, serializer);
            }
            crate::api::syste::LddKey::Num4 => {
                <i32>::sse_encode(43, serializer);
            }
            crate::api::syste::LddKey::Num5 => {
                <i32>::sse_encode(44, serializer);
            }
            crate::api::syste::LddKey::Num6 => {
                <i32>::sse_encode(45, serializer);
            }
            crate::api::syste::LddKey::Num7 => {
                <i32>::sse_encode(46, serializer);
            }
            crate::api::syste::LddKey::Num8 => {
                <i32>::sse_encode(47, serializer);
            }
            crate::api::syste::LddKey::Num9 => {
                <i32>::sse_encode(48, serializer);
            }
            crate::api::syste::LddKey::Num0 => {
                <i32>::sse_encode(49, serializer);
            }
            crate::api::syste::LddKey::Minus => {
                <i32>::sse_encode(50, serializer);
            }
            crate::api::syste::LddKey::Equal => {
                <i32>::sse_encode(51, serializer);
            }
            crate::api::syste::LddKey::KeyQ => {
                <i32>::sse_encode(52, serializer);
            }
            crate::api::syste::LddKey::KeyW => {
                <i32>::sse_encode(53, serializer);
            }
            crate::api::syste::LddKey::KeyE => {
                <i32>::sse_encode(54, serializer);
            }
            crate::api::syste::LddKey::KeyR => {
                <i32>::sse_encode(55, serializer);
            }
            crate::api::syste::LddKey::KeyT => {
                <i32>::sse_encode(56, serializer);
            }
            crate::api::syste::LddKey::KeyY => {
                <i32>::sse_encode(57, serializer);
            }
            crate::api::syste::LddKey::KeyU => {
                <i32>::sse_encode(58, serializer);
            }
            crate::api::syste::LddKey::KeyI => {
                <i32>::sse_encode(59, serializer);
            }
            crate::api::syste::LddKey::KeyO => {
                <i32>::sse_encode(60, serializer);
            }
            crate::api::syste::LddKey::KeyP => {
                <i32>::sse_encode(61, serializer);
            }
            crate::api::syste::LddKey::LeftBracket => {
                <i32>::sse_encode(62, serializer);
            }
            crate::api::syste::LddKey::RightBracket => {
                <i32>::sse_encode(63, serializer);
            }
            crate::api::syste::LddKey::KeyA => {
                <i32>::sse_encode(64, serializer);
            }
            crate::api::syste::LddKey::KeyS => {
                <i32>::sse_encode(65, serializer);
            }
            crate::api::syste::LddKey::KeyD => {
                <i32>::sse_encode(66, serializer);
            }
            crate::api::syste::LddKey::KeyF => {
                <i32>::sse_encode(67, serializer);
            }
            crate::api::syste::LddKey::KeyG => {
                <i32>::sse_encode(68, serializer);
            }
            crate::api::syste::LddKey::KeyH => {
                <i32>::sse_encode(69, serializer);
            }
            crate::api::syste::LddKey::KeyJ => {
                <i32>::sse_encode(70, serializer);
            }
            crate::api::syste::LddKey::KeyK => {
                <i32>::sse_encode(71, serializer);
            }
            crate::api::syste::LddKey::KeyL => {
                <i32>::sse_encode(72, serializer);
            }
            crate::api::syste::LddKey::SemiColon => {
                <i32>::sse_encode(73, serializer);
            }
            crate::api::syste::LddKey::Quote => {
                <i32>::sse_encode(74, serializer);
            }
            crate::api::syste::LddKey::BackSlash => {
                <i32>::sse_encode(75, serializer);
            }
            crate::api::syste::LddKey::IntlBackslash => {
                <i32>::sse_encode(76, serializer);
            }
            crate::api::syste::LddKey::KeyZ => {
                <i32>::sse_encode(77, serializer);
            }
            crate::api::syste::LddKey::KeyX => {
                <i32>::sse_encode(78, serializer);
            }
            crate::api::syste::LddKey::KeyC => {
                <i32>::sse_encode(79, serializer);
            }
            crate::api::syste::LddKey::KeyV => {
                <i32>::sse_encode(80, serializer);
            }
            crate::api::syste::LddKey::KeyB => {
                <i32>::sse_encode(81, serializer);
            }
            crate::api::syste::LddKey::KeyN => {
                <i32>::sse_encode(82, serializer);
            }
            crate::api::syste::LddKey::KeyM => {
                <i32>::sse_encode(83, serializer);
            }
            crate::api::syste::LddKey::Comma => {
                <i32>::sse_encode(84, serializer);
            }
            crate::api::syste::LddKey::Dot => {
                <i32>::sse_encode(85, serializer);
            }
            crate::api::syste::LddKey::Slash => {
                <i32>::sse_encode(86, serializer);
            }
            crate::api::syste::LddKey::Insert => {
                <i32>::sse_encode(87, serializer);
            }
            crate::api::syste::LddKey::KpReturn => {
                <i32>::sse_encode(88, serializer);
            }
            crate::api::syste::LddKey::KpMinus => {
                <i32>::sse_encode(89, serializer);
            }
            crate::api::syste::LddKey::KpPlus => {
                <i32>::sse_encode(90, serializer);
            }
            crate::api::syste::LddKey::KpMultiply => {
                <i32>::sse_encode(91, serializer);
            }
            crate::api::syste::LddKey::KpDivide => {
                <i32>::sse_encode(92, serializer);
            }
            crate::api::syste::LddKey::Kp0 => {
                <i32>::sse_encode(93, serializer);
            }
            crate::api::syste::LddKey::Kp1 => {
                <i32>::sse_encode(94, serializer);
            }
            crate::api::syste::LddKey::Kp2 => {
                <i32>::sse_encode(95, serializer);
            }
            crate::api::syste::LddKey::Kp3 => {
                <i32>::sse_encode(96, serializer);
            }
            crate::api::syste::LddKey::Kp4 => {
                <i32>::sse_encode(97, serializer);
            }
            crate::api::syste::LddKey::Kp5 => {
                <i32>::sse_encode(98, serializer);
            }
            crate::api::syste::LddKey::Kp6 => {
                <i32>::sse_encode(99, serializer);
            }
            crate::api::syste::LddKey::Kp7 => {
                <i32>::sse_encode(100, serializer);
            }
            crate::api::syste::LddKey::Kp8 => {
                <i32>::sse_encode(101, serializer);
            }
            crate::api::syste::LddKey::Kp9 => {
                <i32>::sse_encode(102, serializer);
            }
            crate::api::syste::LddKey::KpDelete => {
                <i32>::sse_encode(103, serializer);
            }
            crate::api::syste::LddKey::Function => {
                <i32>::sse_encode(104, serializer);
            }
            crate::api::syste::LddKey::Unknown(field0) => {
                <i32>::sse_encode(105, serializer);
                <u32>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::entitys::LddKeyId {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::entitys::LddKeyId::Escape => 0,
                crate::api::entitys::LddKeyId::Return => 1,
                crate::api::entitys::LddKeyId::Backspace => 2,
                crate::api::entitys::LddKeyId::Left => 3,
                crate::api::entitys::LddKeyId::Right => 4,
                crate::api::entitys::LddKeyId::Up => 5,
                crate::api::entitys::LddKeyId::Down => 6,
                crate::api::entitys::LddKeyId::Space => 7,
                crate::api::entitys::LddKeyId::A => 8,
                crate::api::entitys::LddKeyId::B => 9,
                crate::api::entitys::LddKeyId::C => 10,
                crate::api::entitys::LddKeyId::D => 11,
                crate::api::entitys::LddKeyId::E => 12,
                crate::api::entitys::LddKeyId::F => 13,
                crate::api::entitys::LddKeyId::G => 14,
                crate::api::entitys::LddKeyId::H => 15,
                crate::api::entitys::LddKeyId::I => 16,
                crate::api::entitys::LddKeyId::J => 17,
                crate::api::entitys::LddKeyId::K => 18,
                crate::api::entitys::LddKeyId::L => 19,
                crate::api::entitys::LddKeyId::M => 20,
                crate::api::entitys::LddKeyId::N => 21,
                crate::api::entitys::LddKeyId::O => 22,
                crate::api::entitys::LddKeyId::P => 23,
                crate::api::entitys::LddKeyId::Q => 24,
                crate::api::entitys::LddKeyId::R => 25,
                crate::api::entitys::LddKeyId::S => 26,
                crate::api::entitys::LddKeyId::T => 27,
                crate::api::entitys::LddKeyId::U => 28,
                crate::api::entitys::LddKeyId::V => 29,
                crate::api::entitys::LddKeyId::W => 30,
                crate::api::entitys::LddKeyId::X => 31,
                crate::api::entitys::LddKeyId::Y => 32,
                crate::api::entitys::LddKeyId::Z => 33,
                crate::api::entitys::LddKeyId::F1 => 34,
                crate::api::entitys::LddKeyId::F2 => 35,
                crate::api::entitys::LddKeyId::F3 => 36,
                crate::api::entitys::LddKeyId::F4 => 37,
                crate::api::entitys::LddKeyId::F5 => 38,
                crate::api::entitys::LddKeyId::F6 => 39,
                crate::api::entitys::LddKeyId::F7 => 40,
                crate::api::entitys::LddKeyId::F8 => 41,
                crate::api::entitys::LddKeyId::F9 => 42,
                crate::api::entitys::LddKeyId::F10 => 43,
                crate::api::entitys::LddKeyId::F11 => 44,
                crate::api::entitys::LddKeyId::F12 => 45,
                crate::api::entitys::LddKeyId::Zero => 46,
                crate::api::entitys::LddKeyId::One => 47,
                crate::api::entitys::LddKeyId::Two => 48,
                crate::api::entitys::LddKeyId::Three => 49,
                crate::api::entitys::LddKeyId::Four => 50,
                crate::api::entitys::LddKeyId::Five => 51,
                crate::api::entitys::LddKeyId::Six => 52,
                crate::api::entitys::LddKeyId::Seven => 53,
                crate::api::entitys::LddKeyId::Eight => 54,
                crate::api::entitys::LddKeyId::Nine => 55,
                crate::api::entitys::LddKeyId::Shift => 56,
                crate::api::entitys::LddKeyId::LeftCtrl => 57,
                crate::api::entitys::LddKeyId::RightCtrl => 58,
                crate::api::entitys::LddKeyId::LeftAlt => 59,
                crate::api::entitys::LddKeyId::RightAlt => 60,
                crate::api::entitys::LddKeyId::CapsLock => 61,
                crate::api::entitys::LddKeyId::Pause => 62,
                crate::api::entitys::LddKeyId::PageUp => 63,
                crate::api::entitys::LddKeyId::PageDown => 64,
                crate::api::entitys::LddKeyId::PrintScreen => 65,
                crate::api::entitys::LddKeyId::Insert => 66,
                crate::api::entitys::LddKeyId::End => 67,
                crate::api::entitys::LddKeyId::Home => 68,
                crate::api::entitys::LddKeyId::Delete => 69,
                crate::api::entitys::LddKeyId::Add => 70,
                crate::api::entitys::LddKeyId::Subtract => 71,
                crate::api::entitys::LddKeyId::Multiply => 72,
                crate::api::entitys::LddKeyId::Separator => 73,
                crate::api::entitys::LddKeyId::Decimal => 74,
                crate::api::entitys::LddKeyId::Divide => 75,
                crate::api::entitys::LddKeyId::BackTick => 76,
                crate::api::entitys::LddKeyId::BackSlash => 77,
                crate::api::entitys::LddKeyId::ForwardSlash => 78,
                crate::api::entitys::LddKeyId::Plus => 79,
                crate::api::entitys::LddKeyId::Minus => 80,
                crate::api::entitys::LddKeyId::FullStop => 81,
                crate::api::entitys::LddKeyId::Comma => 82,
                crate::api::entitys::LddKeyId::Tab => 83,
                crate::api::entitys::LddKeyId::Numlock => 84,
                crate::api::entitys::LddKeyId::LeftSquareBracket => 85,
                crate::api::entitys::LddKeyId::RightSquareBracket => 86,
                crate::api::entitys::LddKeyId::SemiColon => 87,
                crate::api::entitys::LddKeyId::Apostrophe => 88,
                crate::api::entitys::LddKeyId::Hash => 89,
                crate::api::entitys::LddKeyId::NumPad0 => 90,
                crate::api::entitys::LddKeyId::NumPad1 => 91,
                crate::api::entitys::LddKeyId::NumPad2 => 92,
                crate::api::entitys::LddKeyId::NumPad3 => 93,
                crate::api::entitys::LddKeyId::NumPad4 => 94,
                crate::api::entitys::LddKeyId::NumPad5 => 95,
                crate::api::entitys::LddKeyId::NumPad6 => 96,
                crate::api::entitys::LddKeyId::NumPad7 => 97,
                crate::api::entitys::LddKeyId::NumPad8 => 98,
                crate::api::entitys::LddKeyId::NumPad9 => 99,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::entitys::LddKeyboard {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.serial, serializer);
    }
}

impl SseEncode for crate::api::syste::LddKeyboardValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::syste::LddKeyboardValue::ScanGunValue(field0, field1) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
                <u128>::sse_encode(field1, serializer);
            }
            crate::api::syste::LddKeyboardValue::KeyboardValue(field0, field1) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::syste::LddEvent>::sse_encode(field0, serializer);
                <u128>::sse_encode(field1, serializer);
            }
            crate::api::syste::LddKeyboardValue::ScanGunValueV2(field0) => {
                <i32>::sse_encode(2, serializer);
                <Vec<crate::api::syste::LddEvent>>::sse_encode(field0, serializer);
            }
            crate::api::syste::LddKeyboardValue::KeyboardValueV2(field0) => {
                <i32>::sse_encode(3, serializer);
                <crate::api::syste::LddEvent>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::entitys::LddRawEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::entitys::LddRawEvent::LddKeyboardEvent(field0, field1, field2, field3) => {
                <i32>::sse_encode(0, serializer);
                <usize>::sse_encode(field0, serializer);
                <crate::api::entitys::LddKeyId>::sse_encode(field1, serializer);
                <crate::api::entitys::LddState>::sse_encode(field2, serializer);
                <crate::api::entitys::LddKeyboard>::sse_encode(field3, serializer);
            }
            crate::api::entitys::LddRawEvent::ScanGunEvent(field0, field1) => {
                <i32>::sse_encode(1, serializer);
                <Vec<crate::api::entitys::LddKeyId>>::sse_encode(field0, serializer);
                <crate::api::entitys::LddKeyboard>::sse_encode(field1, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::entitys::LddState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::entitys::LddState::Pressed => 0,
                crate::api::entitys::LddState::Released => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Vec<crate::api::syste::LddEvent> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::syste::LddEvent>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::entitys::LddKeyId> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::entitys::LddKeyId>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::entitys::LddKeyboard> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::entitys::LddKeyboard>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::entitys::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.time_millis, serializer);
        <i32>::sse_encode(self.level, serializer);
        <String>::sse_encode(self.tag, serializer);
        <String>::sse_encode(self.msg, serializer);
    }
}

impl SseEncode for crate::api::logger::MyMobileLogger {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::entitys::LddKeyboard> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::entitys::LddKeyboard>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <usize>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::logger::SendToDartLogger {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.1.0.

    // Section: imports

    use super::*;
    use crate::api::multiinput::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[no_mangle]
    pub extern "C" fn frbgen_ldd_system_listen_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddKeyboardManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddKeyboardManager>>::increment_strong_count(ptr as _);
    }

    #[no_mangle]
    pub extern "C" fn frbgen_ldd_system_listen_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddKeyboardManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddKeyboardManager>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.1.0.

    // Section: imports

    use super::*;
    use crate::api::multiinput::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddKeyboardManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddKeyboardManager>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLddKeyboardManager(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<LddKeyboardManager>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

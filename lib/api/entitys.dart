// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'entitys.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `from`, `hash`

enum LddKeyId {
  escape,
  return_,
  backspace,
  left,
  right,
  up,
  down,
  space,
  a,
  b,
  c,
  d,
  e,
  f,
  g,
  h,
  i,
  j,
  k,
  l,
  m,
  n,
  o,
  p,
  q,
  r,
  s,
  t,
  u,
  v,
  w,
  x,
  y,
  z,
  f1,
  f2,
  f3,
  f4,
  f5,
  f6,
  f7,
  f8,
  f9,
  f10,
  f11,
  f12,
  zero,
  one,
  two,
  three,
  four,
  five,
  six,
  seven,
  eight,
  nine,
  shift,
  leftCtrl,
  rightCtrl,
  leftAlt,
  rightAlt,
  capsLock,
  pause,
  pageUp,
  pageDown,
  printScreen,
  insert,
  end,
  home,
  delete,
  add,
  subtract,
  multiply,
  separator,
  decimal,
  divide,
  backTick,
  backSlash,
  forwardSlash,
  plus,
  minus,
  fullStop,
  comma,
  tab,
  numlock,
  leftSquareBracket,
  rightSquareBracket,
  semiColon,
  apostrophe,
  hash,
  numPad0,
  numPad1,
  numPad2,
  numPad3,
  numPad4,
  numPad5,
  numPad6,
  numPad7,
  numPad8,
  numPad9,
  ;

  ///转传统字符串
  String keyIdToString() =>
      RustLib.instance.api.crateApiEntitysLddKeyIdKeyIdToString(
        that: this,
      );
}

class LddKeyboard {
  final String name;
  final String? serial;

  const LddKeyboard({
    required this.name,
    this.serial,
  });

  @override
  int get hashCode => name.hashCode ^ serial.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LddKeyboard &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          serial == other.serial;
}

@freezed
sealed class LddRawEvent with _$LddRawEvent {
  const LddRawEvent._();

  const factory LddRawEvent.lddKeyboardEvent(
    BigInt field0,
    LddKeyId field1,
    LddState field2,
    LddKeyboard field3,
  ) = LddRawEvent_LddKeyboardEvent;
  const factory LddRawEvent.scanGunEvent(
    List<LddKeyId> field0,
    LddKeyboard field1,
  ) = LddRawEvent_ScanGunEvent;
}

enum LddState {
  pressed,
  released,
  ;

  String formatString() =>
      RustLib.instance.api.crateApiEntitysLddStateFormatString(
        that: this,
      );
}

class LogEntry {
  final PlatformInt64 timeMillis;
  final int level;
  final String tag;
  final String msg;

  const LogEntry({
    required this.timeMillis,
    required this.level,
    required this.tag,
    required this.msg,
  });

  @override
  int get hashCode =>
      timeMillis.hashCode ^ level.hashCode ^ tag.hashCode ^ msg.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LogEntry &&
          runtimeType == other.runtimeType &&
          timeMillis == other.timeMillis &&
          level == other.level &&
          tag == other.tag &&
          msg == other.msg;
}

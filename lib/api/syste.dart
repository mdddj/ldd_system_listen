// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'syste.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `callback`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `eq`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `from`

Stream<LddEvent> startListenSystemEvent() =>
    RustLib.instance.api.crateApiSysteStartListenSystemEvent();

/// [millis] 设置字符输入之间的最大时间间隔，小于此时间则认为是连续输入
/// [min_size] 假设扫码枪至少输入 10 个字符以上，作为判定标准之一
Stream<LddKeyboardValue> startListenSystenEventByLdd(
        {BigInt? millis, BigInt? minSize}) =>
    RustLib.instance.api.crateApiSysteStartListenSystenEventByLdd(
        millis: millis, minSize: minSize);

@freezed
sealed class LddButton with _$LddButton {
  const LddButton._();

  const factory LddButton.left() = LddButton_Left;
  const factory LddButton.right() = LddButton_Right;
  const factory LddButton.middle() = LddButton_Middle;
  const factory LddButton.unknown(
    int field0,
  ) = LddButton_Unknown;
}

class LddEvent {
  final String? name;
  final LddEventType eventType;

  const LddEvent({
    this.name,
    required this.eventType,
  });

  @override
  int get hashCode => name.hashCode ^ eventType.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LddEvent &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          eventType == other.eventType;
}

@freezed
sealed class LddEventType with _$LddEventType {
  const LddEventType._();

  const factory LddEventType.keyPress(
    LddKey field0,
  ) = LddEventType_KeyPress;
  const factory LddEventType.keyRelease(
    LddKey field0,
  ) = LddEventType_KeyRelease;
  const factory LddEventType.buttonPress(
    LddButton field0,
  ) = LddEventType_ButtonPress;
  const factory LddEventType.buttonRelease(
    LddButton field0,
  ) = LddEventType_ButtonRelease;
  const factory LddEventType.mouseMove({
    required double x,
    required double y,
  }) = LddEventType_MouseMove;
  const factory LddEventType.wheel({
    required PlatformInt64 deltaX,
    required PlatformInt64 deltaY,
  }) = LddEventType_Wheel;
}

@freezed
sealed class LddKey with _$LddKey {
  const LddKey._();

  const factory LddKey.alt() = LddKey_Alt;
  const factory LddKey.altGr() = LddKey_AltGr;
  const factory LddKey.backspace() = LddKey_Backspace;
  const factory LddKey.capsLock() = LddKey_CapsLock;
  const factory LddKey.controlLeft() = LddKey_ControlLeft;
  const factory LddKey.controlRight() = LddKey_ControlRight;
  const factory LddKey.delete() = LddKey_Delete;
  const factory LddKey.downArrow() = LddKey_DownArrow;
  const factory LddKey.end() = LddKey_End;
  const factory LddKey.escape() = LddKey_Escape;
  const factory LddKey.f1() = LddKey_F1;
  const factory LddKey.f10() = LddKey_F10;
  const factory LddKey.f11() = LddKey_F11;
  const factory LddKey.f12() = LddKey_F12;
  const factory LddKey.f2() = LddKey_F2;
  const factory LddKey.f3() = LddKey_F3;
  const factory LddKey.f4() = LddKey_F4;
  const factory LddKey.f5() = LddKey_F5;
  const factory LddKey.f6() = LddKey_F6;
  const factory LddKey.f7() = LddKey_F7;
  const factory LddKey.f8() = LddKey_F8;
  const factory LddKey.f9() = LddKey_F9;
  const factory LddKey.home() = LddKey_Home;
  const factory LddKey.leftArrow() = LddKey_LeftArrow;
  const factory LddKey.metaLeft() = LddKey_MetaLeft;
  const factory LddKey.metaRight() = LddKey_MetaRight;
  const factory LddKey.pageDown() = LddKey_PageDown;
  const factory LddKey.pageUp() = LddKey_PageUp;
  const factory LddKey.return_() = LddKey_Return;
  const factory LddKey.rightArrow() = LddKey_RightArrow;
  const factory LddKey.shiftLeft() = LddKey_ShiftLeft;
  const factory LddKey.shiftRight() = LddKey_ShiftRight;
  const factory LddKey.space() = LddKey_Space;
  const factory LddKey.tab() = LddKey_Tab;
  const factory LddKey.upArrow() = LddKey_UpArrow;
  const factory LddKey.printScreen() = LddKey_PrintScreen;
  const factory LddKey.scrollLock() = LddKey_ScrollLock;
  const factory LddKey.pause() = LddKey_Pause;
  const factory LddKey.numLock() = LddKey_NumLock;
  const factory LddKey.backQuote() = LddKey_BackQuote;
  const factory LddKey.num1() = LddKey_Num1;
  const factory LddKey.num2() = LddKey_Num2;
  const factory LddKey.num3() = LddKey_Num3;
  const factory LddKey.num4() = LddKey_Num4;
  const factory LddKey.num5() = LddKey_Num5;
  const factory LddKey.num6() = LddKey_Num6;
  const factory LddKey.num7() = LddKey_Num7;
  const factory LddKey.num8() = LddKey_Num8;
  const factory LddKey.num9() = LddKey_Num9;
  const factory LddKey.num0() = LddKey_Num0;
  const factory LddKey.minus() = LddKey_Minus;
  const factory LddKey.equal() = LddKey_Equal;
  const factory LddKey.keyQ() = LddKey_KeyQ;
  const factory LddKey.keyW() = LddKey_KeyW;
  const factory LddKey.keyE() = LddKey_KeyE;
  const factory LddKey.keyR() = LddKey_KeyR;
  const factory LddKey.keyT() = LddKey_KeyT;
  const factory LddKey.keyY() = LddKey_KeyY;
  const factory LddKey.keyU() = LddKey_KeyU;
  const factory LddKey.keyI() = LddKey_KeyI;
  const factory LddKey.keyO() = LddKey_KeyO;
  const factory LddKey.keyP() = LddKey_KeyP;
  const factory LddKey.leftBracket() = LddKey_LeftBracket;
  const factory LddKey.rightBracket() = LddKey_RightBracket;
  const factory LddKey.keyA() = LddKey_KeyA;
  const factory LddKey.keyS() = LddKey_KeyS;
  const factory LddKey.keyD() = LddKey_KeyD;
  const factory LddKey.keyF() = LddKey_KeyF;
  const factory LddKey.keyG() = LddKey_KeyG;
  const factory LddKey.keyH() = LddKey_KeyH;
  const factory LddKey.keyJ() = LddKey_KeyJ;
  const factory LddKey.keyK() = LddKey_KeyK;
  const factory LddKey.keyL() = LddKey_KeyL;
  const factory LddKey.semiColon() = LddKey_SemiColon;
  const factory LddKey.quote() = LddKey_Quote;
  const factory LddKey.backSlash() = LddKey_BackSlash;
  const factory LddKey.intlBackslash() = LddKey_IntlBackslash;
  const factory LddKey.keyZ() = LddKey_KeyZ;
  const factory LddKey.keyX() = LddKey_KeyX;
  const factory LddKey.keyC() = LddKey_KeyC;
  const factory LddKey.keyV() = LddKey_KeyV;
  const factory LddKey.keyB() = LddKey_KeyB;
  const factory LddKey.keyN() = LddKey_KeyN;
  const factory LddKey.keyM() = LddKey_KeyM;
  const factory LddKey.comma() = LddKey_Comma;
  const factory LddKey.dot() = LddKey_Dot;
  const factory LddKey.slash() = LddKey_Slash;
  const factory LddKey.insert() = LddKey_Insert;
  const factory LddKey.kpReturn() = LddKey_KpReturn;
  const factory LddKey.kpMinus() = LddKey_KpMinus;
  const factory LddKey.kpPlus() = LddKey_KpPlus;
  const factory LddKey.kpMultiply() = LddKey_KpMultiply;
  const factory LddKey.kpDivide() = LddKey_KpDivide;
  const factory LddKey.kp0() = LddKey_Kp0;
  const factory LddKey.kp1() = LddKey_Kp1;
  const factory LddKey.kp2() = LddKey_Kp2;
  const factory LddKey.kp3() = LddKey_Kp3;
  const factory LddKey.kp4() = LddKey_Kp4;
  const factory LddKey.kp5() = LddKey_Kp5;
  const factory LddKey.kp6() = LddKey_Kp6;
  const factory LddKey.kp7() = LddKey_Kp7;
  const factory LddKey.kp8() = LddKey_Kp8;
  const factory LddKey.kp9() = LddKey_Kp9;
  const factory LddKey.kpDelete() = LddKey_KpDelete;
  const factory LddKey.function() = LddKey_Function;
  const factory LddKey.unknown(
    int field0,
  ) = LddKey_Unknown;
}

@freezed
sealed class LddKeyboardValue with _$LddKeyboardValue {
  const LddKeyboardValue._();

  const factory LddKeyboardValue.scanGunValue(
    String field0,
    BigInt field1,
  ) = LddKeyboardValue_ScanGunValue;
  const factory LddKeyboardValue.keyboardValue(
    LddEvent field0,
    BigInt field1,
  ) = LddKeyboardValue_KeyboardValue;
}

// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/keyboard_listen.dart';
import 'api/syste.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.3.0';

  @override
  int get rustContentHash => -2110124214;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'ldd_system_listen',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Stream<LddKeyboardValue> crateApiKeyboardListenStartListen();

  Stream<LddEvent> crateApiSysteStartListenSystemEvent();

  Stream<LddKeyboardValue> crateApiSysteStartListenSystenEventByLdd(
      {BigInt? millis, BigInt? minSize});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Stream<LddKeyboardValue> crateApiKeyboardListenStartListen() {
    final sink = RustStreamSink<LddKeyboardValue>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_ldd_keyboard_value_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiKeyboardListenStartListenConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiKeyboardListenStartListenConstMeta =>
      const TaskConstMeta(
        debugName: "start_listen",
        argNames: ["sink"],
      );

  @override
  Stream<LddEvent> crateApiSysteStartListenSystemEvent() {
    final sink = RustStreamSink<LddEvent>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_ldd_event_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiSysteStartListenSystemEventConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiSysteStartListenSystemEventConstMeta =>
      const TaskConstMeta(
        debugName: "start_listen_system_event",
        argNames: ["sink"],
      );

  @override
  Stream<LddKeyboardValue> crateApiSysteStartListenSystenEventByLdd(
      {BigInt? millis, BigInt? minSize}) {
    final sink = RustStreamSink<LddKeyboardValue>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_ldd_keyboard_value_Sse(sink, serializer);
        sse_encode_opt_box_autoadd_u_64(millis, serializer);
        sse_encode_opt_box_autoadd_usize(minSize, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSysteStartListenSystenEventByLddConstMeta,
      argValues: [sink, millis, minSize],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiSysteStartListenSystenEventByLddConstMeta =>
      const TaskConstMeta(
        debugName: "start_listen_systen_event_by_ldd",
        argNames: ["sink", "millis", "minSize"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  RustStreamSink<LddEvent> dco_decode_StreamSink_ldd_event_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<LddKeyboardValue> dco_decode_StreamSink_ldd_keyboard_value_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BigInt dco_decode_U128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BigInt.parse(raw);
  }

  @protected
  LddButton dco_decode_box_autoadd_ldd_button(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ldd_button(raw);
  }

  @protected
  LddEvent dco_decode_box_autoadd_ldd_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ldd_event(raw);
  }

  @protected
  LddKey dco_decode_box_autoadd_ldd_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ldd_key(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  LddButton dco_decode_ldd_button(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return LddButton_Left();
      case 1:
        return LddButton_Right();
      case 2:
        return LddButton_Middle();
      case 3:
        return LddButton_Unknown(
          dco_decode_u_8(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  LddEvent dco_decode_ldd_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LddEvent(
      name: dco_decode_opt_String(arr[0]),
      eventType: dco_decode_ldd_event_type(arr[1]),
    );
  }

  @protected
  LddEventType dco_decode_ldd_event_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return LddEventType_KeyPress(
          dco_decode_box_autoadd_ldd_key(raw[1]),
        );
      case 1:
        return LddEventType_KeyRelease(
          dco_decode_box_autoadd_ldd_key(raw[1]),
        );
      case 2:
        return LddEventType_ButtonPress(
          dco_decode_box_autoadd_ldd_button(raw[1]),
        );
      case 3:
        return LddEventType_ButtonRelease(
          dco_decode_box_autoadd_ldd_button(raw[1]),
        );
      case 4:
        return LddEventType_MouseMove(
          x: dco_decode_f_64(raw[1]),
          y: dco_decode_f_64(raw[2]),
        );
      case 5:
        return LddEventType_Wheel(
          deltaX: dco_decode_i_64(raw[1]),
          deltaY: dco_decode_i_64(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  LddKey dco_decode_ldd_key(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return LddKey_Alt();
      case 1:
        return LddKey_AltGr();
      case 2:
        return LddKey_Backspace();
      case 3:
        return LddKey_CapsLock();
      case 4:
        return LddKey_ControlLeft();
      case 5:
        return LddKey_ControlRight();
      case 6:
        return LddKey_Delete();
      case 7:
        return LddKey_DownArrow();
      case 8:
        return LddKey_End();
      case 9:
        return LddKey_Escape();
      case 10:
        return LddKey_F1();
      case 11:
        return LddKey_F10();
      case 12:
        return LddKey_F11();
      case 13:
        return LddKey_F12();
      case 14:
        return LddKey_F2();
      case 15:
        return LddKey_F3();
      case 16:
        return LddKey_F4();
      case 17:
        return LddKey_F5();
      case 18:
        return LddKey_F6();
      case 19:
        return LddKey_F7();
      case 20:
        return LddKey_F8();
      case 21:
        return LddKey_F9();
      case 22:
        return LddKey_Home();
      case 23:
        return LddKey_LeftArrow();
      case 24:
        return LddKey_MetaLeft();
      case 25:
        return LddKey_MetaRight();
      case 26:
        return LddKey_PageDown();
      case 27:
        return LddKey_PageUp();
      case 28:
        return LddKey_Return();
      case 29:
        return LddKey_RightArrow();
      case 30:
        return LddKey_ShiftLeft();
      case 31:
        return LddKey_ShiftRight();
      case 32:
        return LddKey_Space();
      case 33:
        return LddKey_Tab();
      case 34:
        return LddKey_UpArrow();
      case 35:
        return LddKey_PrintScreen();
      case 36:
        return LddKey_ScrollLock();
      case 37:
        return LddKey_Pause();
      case 38:
        return LddKey_NumLock();
      case 39:
        return LddKey_BackQuote();
      case 40:
        return LddKey_Num1();
      case 41:
        return LddKey_Num2();
      case 42:
        return LddKey_Num3();
      case 43:
        return LddKey_Num4();
      case 44:
        return LddKey_Num5();
      case 45:
        return LddKey_Num6();
      case 46:
        return LddKey_Num7();
      case 47:
        return LddKey_Num8();
      case 48:
        return LddKey_Num9();
      case 49:
        return LddKey_Num0();
      case 50:
        return LddKey_Minus();
      case 51:
        return LddKey_Equal();
      case 52:
        return LddKey_KeyQ();
      case 53:
        return LddKey_KeyW();
      case 54:
        return LddKey_KeyE();
      case 55:
        return LddKey_KeyR();
      case 56:
        return LddKey_KeyT();
      case 57:
        return LddKey_KeyY();
      case 58:
        return LddKey_KeyU();
      case 59:
        return LddKey_KeyI();
      case 60:
        return LddKey_KeyO();
      case 61:
        return LddKey_KeyP();
      case 62:
        return LddKey_LeftBracket();
      case 63:
        return LddKey_RightBracket();
      case 64:
        return LddKey_KeyA();
      case 65:
        return LddKey_KeyS();
      case 66:
        return LddKey_KeyD();
      case 67:
        return LddKey_KeyF();
      case 68:
        return LddKey_KeyG();
      case 69:
        return LddKey_KeyH();
      case 70:
        return LddKey_KeyJ();
      case 71:
        return LddKey_KeyK();
      case 72:
        return LddKey_KeyL();
      case 73:
        return LddKey_SemiColon();
      case 74:
        return LddKey_Quote();
      case 75:
        return LddKey_BackSlash();
      case 76:
        return LddKey_IntlBackslash();
      case 77:
        return LddKey_KeyZ();
      case 78:
        return LddKey_KeyX();
      case 79:
        return LddKey_KeyC();
      case 80:
        return LddKey_KeyV();
      case 81:
        return LddKey_KeyB();
      case 82:
        return LddKey_KeyN();
      case 83:
        return LddKey_KeyM();
      case 84:
        return LddKey_Comma();
      case 85:
        return LddKey_Dot();
      case 86:
        return LddKey_Slash();
      case 87:
        return LddKey_Insert();
      case 88:
        return LddKey_KpReturn();
      case 89:
        return LddKey_KpMinus();
      case 90:
        return LddKey_KpPlus();
      case 91:
        return LddKey_KpMultiply();
      case 92:
        return LddKey_KpDivide();
      case 93:
        return LddKey_Kp0();
      case 94:
        return LddKey_Kp1();
      case 95:
        return LddKey_Kp2();
      case 96:
        return LddKey_Kp3();
      case 97:
        return LddKey_Kp4();
      case 98:
        return LddKey_Kp5();
      case 99:
        return LddKey_Kp6();
      case 100:
        return LddKey_Kp7();
      case 101:
        return LddKey_Kp8();
      case 102:
        return LddKey_Kp9();
      case 103:
        return LddKey_KpDelete();
      case 104:
        return LddKey_Function();
      case 105:
        return LddKey_Unknown(
          dco_decode_u_32(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  LddKeyboardValue dco_decode_ldd_keyboard_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return LddKeyboardValue_ScanGunValue(
          dco_decode_String(raw[1]),
          dco_decode_U128(raw[2]),
        );
      case 1:
        return LddKeyboardValue_KeyboardValue(
          dco_decode_box_autoadd_ldd_event(raw[1]),
          dco_decode_U128(raw[2]),
        );
      case 2:
        return LddKeyboardValue_ScanGunValueV2(
          dco_decode_list_ldd_event(raw[1]),
        );
      case 3:
        return LddKeyboardValue_KeyboardValueV2(
          dco_decode_box_autoadd_ldd_event(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  List<LddEvent> dco_decode_list_ldd_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_ldd_event).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  RustStreamSink<LddEvent> sse_decode_StreamSink_ldd_event_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<LddKeyboardValue> sse_decode_StreamSink_ldd_keyboard_value_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BigInt sse_decode_U128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return BigInt.parse(inner);
  }

  @protected
  LddButton sse_decode_box_autoadd_ldd_button(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ldd_button(deserializer));
  }

  @protected
  LddEvent sse_decode_box_autoadd_ldd_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ldd_event(deserializer));
  }

  @protected
  LddKey sse_decode_box_autoadd_ldd_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ldd_key(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  LddButton sse_decode_ldd_button(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return LddButton_Left();
      case 1:
        return LddButton_Right();
      case 2:
        return LddButton_Middle();
      case 3:
        var var_field0 = sse_decode_u_8(deserializer);
        return LddButton_Unknown(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  LddEvent sse_decode_ldd_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_opt_String(deserializer);
    var var_eventType = sse_decode_ldd_event_type(deserializer);
    return LddEvent(name: var_name, eventType: var_eventType);
  }

  @protected
  LddEventType sse_decode_ldd_event_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_ldd_key(deserializer);
        return LddEventType_KeyPress(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_ldd_key(deserializer);
        return LddEventType_KeyRelease(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_ldd_button(deserializer);
        return LddEventType_ButtonPress(var_field0);
      case 3:
        var var_field0 = sse_decode_box_autoadd_ldd_button(deserializer);
        return LddEventType_ButtonRelease(var_field0);
      case 4:
        var var_x = sse_decode_f_64(deserializer);
        var var_y = sse_decode_f_64(deserializer);
        return LddEventType_MouseMove(x: var_x, y: var_y);
      case 5:
        var var_deltaX = sse_decode_i_64(deserializer);
        var var_deltaY = sse_decode_i_64(deserializer);
        return LddEventType_Wheel(deltaX: var_deltaX, deltaY: var_deltaY);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  LddKey sse_decode_ldd_key(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return LddKey_Alt();
      case 1:
        return LddKey_AltGr();
      case 2:
        return LddKey_Backspace();
      case 3:
        return LddKey_CapsLock();
      case 4:
        return LddKey_ControlLeft();
      case 5:
        return LddKey_ControlRight();
      case 6:
        return LddKey_Delete();
      case 7:
        return LddKey_DownArrow();
      case 8:
        return LddKey_End();
      case 9:
        return LddKey_Escape();
      case 10:
        return LddKey_F1();
      case 11:
        return LddKey_F10();
      case 12:
        return LddKey_F11();
      case 13:
        return LddKey_F12();
      case 14:
        return LddKey_F2();
      case 15:
        return LddKey_F3();
      case 16:
        return LddKey_F4();
      case 17:
        return LddKey_F5();
      case 18:
        return LddKey_F6();
      case 19:
        return LddKey_F7();
      case 20:
        return LddKey_F8();
      case 21:
        return LddKey_F9();
      case 22:
        return LddKey_Home();
      case 23:
        return LddKey_LeftArrow();
      case 24:
        return LddKey_MetaLeft();
      case 25:
        return LddKey_MetaRight();
      case 26:
        return LddKey_PageDown();
      case 27:
        return LddKey_PageUp();
      case 28:
        return LddKey_Return();
      case 29:
        return LddKey_RightArrow();
      case 30:
        return LddKey_ShiftLeft();
      case 31:
        return LddKey_ShiftRight();
      case 32:
        return LddKey_Space();
      case 33:
        return LddKey_Tab();
      case 34:
        return LddKey_UpArrow();
      case 35:
        return LddKey_PrintScreen();
      case 36:
        return LddKey_ScrollLock();
      case 37:
        return LddKey_Pause();
      case 38:
        return LddKey_NumLock();
      case 39:
        return LddKey_BackQuote();
      case 40:
        return LddKey_Num1();
      case 41:
        return LddKey_Num2();
      case 42:
        return LddKey_Num3();
      case 43:
        return LddKey_Num4();
      case 44:
        return LddKey_Num5();
      case 45:
        return LddKey_Num6();
      case 46:
        return LddKey_Num7();
      case 47:
        return LddKey_Num8();
      case 48:
        return LddKey_Num9();
      case 49:
        return LddKey_Num0();
      case 50:
        return LddKey_Minus();
      case 51:
        return LddKey_Equal();
      case 52:
        return LddKey_KeyQ();
      case 53:
        return LddKey_KeyW();
      case 54:
        return LddKey_KeyE();
      case 55:
        return LddKey_KeyR();
      case 56:
        return LddKey_KeyT();
      case 57:
        return LddKey_KeyY();
      case 58:
        return LddKey_KeyU();
      case 59:
        return LddKey_KeyI();
      case 60:
        return LddKey_KeyO();
      case 61:
        return LddKey_KeyP();
      case 62:
        return LddKey_LeftBracket();
      case 63:
        return LddKey_RightBracket();
      case 64:
        return LddKey_KeyA();
      case 65:
        return LddKey_KeyS();
      case 66:
        return LddKey_KeyD();
      case 67:
        return LddKey_KeyF();
      case 68:
        return LddKey_KeyG();
      case 69:
        return LddKey_KeyH();
      case 70:
        return LddKey_KeyJ();
      case 71:
        return LddKey_KeyK();
      case 72:
        return LddKey_KeyL();
      case 73:
        return LddKey_SemiColon();
      case 74:
        return LddKey_Quote();
      case 75:
        return LddKey_BackSlash();
      case 76:
        return LddKey_IntlBackslash();
      case 77:
        return LddKey_KeyZ();
      case 78:
        return LddKey_KeyX();
      case 79:
        return LddKey_KeyC();
      case 80:
        return LddKey_KeyV();
      case 81:
        return LddKey_KeyB();
      case 82:
        return LddKey_KeyN();
      case 83:
        return LddKey_KeyM();
      case 84:
        return LddKey_Comma();
      case 85:
        return LddKey_Dot();
      case 86:
        return LddKey_Slash();
      case 87:
        return LddKey_Insert();
      case 88:
        return LddKey_KpReturn();
      case 89:
        return LddKey_KpMinus();
      case 90:
        return LddKey_KpPlus();
      case 91:
        return LddKey_KpMultiply();
      case 92:
        return LddKey_KpDivide();
      case 93:
        return LddKey_Kp0();
      case 94:
        return LddKey_Kp1();
      case 95:
        return LddKey_Kp2();
      case 96:
        return LddKey_Kp3();
      case 97:
        return LddKey_Kp4();
      case 98:
        return LddKey_Kp5();
      case 99:
        return LddKey_Kp6();
      case 100:
        return LddKey_Kp7();
      case 101:
        return LddKey_Kp8();
      case 102:
        return LddKey_Kp9();
      case 103:
        return LddKey_KpDelete();
      case 104:
        return LddKey_Function();
      case 105:
        var var_field0 = sse_decode_u_32(deserializer);
        return LddKey_Unknown(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  LddKeyboardValue sse_decode_ldd_keyboard_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        var var_field1 = sse_decode_U128(deserializer);
        return LddKeyboardValue_ScanGunValue(var_field0, var_field1);
      case 1:
        var var_field0 = sse_decode_box_autoadd_ldd_event(deserializer);
        var var_field1 = sse_decode_U128(deserializer);
        return LddKeyboardValue_KeyboardValue(var_field0, var_field1);
      case 2:
        var var_field0 = sse_decode_list_ldd_event(deserializer);
        return LddKeyboardValue_ScanGunValueV2(var_field0);
      case 3:
        var var_field0 = sse_decode_box_autoadd_ldd_event(deserializer);
        return LddKeyboardValue_KeyboardValueV2(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  List<LddEvent> sse_decode_list_ldd_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <LddEvent>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_ldd_event(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_StreamSink_ldd_event_Sse(
      RustStreamSink<LddEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_ldd_event,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_ldd_keyboard_value_Sse(
      RustStreamSink<LddKeyboardValue> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_ldd_keyboard_value,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_U128(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.toString(), serializer);
  }

  @protected
  void sse_encode_box_autoadd_ldd_button(
      LddButton self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ldd_button(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ldd_event(
      LddEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ldd_event(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ldd_key(LddKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ldd_key(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_ldd_button(LddButton self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case LddButton_Left():
        sse_encode_i_32(0, serializer);
      case LddButton_Right():
        sse_encode_i_32(1, serializer);
      case LddButton_Middle():
        sse_encode_i_32(2, serializer);
      case LddButton_Unknown(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_u_8(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_ldd_event(LddEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.name, serializer);
    sse_encode_ldd_event_type(self.eventType, serializer);
  }

  @protected
  void sse_encode_ldd_event_type(LddEventType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case LddEventType_KeyPress(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_ldd_key(field0, serializer);
      case LddEventType_KeyRelease(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_ldd_key(field0, serializer);
      case LddEventType_ButtonPress(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_ldd_button(field0, serializer);
      case LddEventType_ButtonRelease(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_box_autoadd_ldd_button(field0, serializer);
      case LddEventType_MouseMove(x: final x, y: final y):
        sse_encode_i_32(4, serializer);
        sse_encode_f_64(x, serializer);
        sse_encode_f_64(y, serializer);
      case LddEventType_Wheel(deltaX: final deltaX, deltaY: final deltaY):
        sse_encode_i_32(5, serializer);
        sse_encode_i_64(deltaX, serializer);
        sse_encode_i_64(deltaY, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_ldd_key(LddKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case LddKey_Alt():
        sse_encode_i_32(0, serializer);
      case LddKey_AltGr():
        sse_encode_i_32(1, serializer);
      case LddKey_Backspace():
        sse_encode_i_32(2, serializer);
      case LddKey_CapsLock():
        sse_encode_i_32(3, serializer);
      case LddKey_ControlLeft():
        sse_encode_i_32(4, serializer);
      case LddKey_ControlRight():
        sse_encode_i_32(5, serializer);
      case LddKey_Delete():
        sse_encode_i_32(6, serializer);
      case LddKey_DownArrow():
        sse_encode_i_32(7, serializer);
      case LddKey_End():
        sse_encode_i_32(8, serializer);
      case LddKey_Escape():
        sse_encode_i_32(9, serializer);
      case LddKey_F1():
        sse_encode_i_32(10, serializer);
      case LddKey_F10():
        sse_encode_i_32(11, serializer);
      case LddKey_F11():
        sse_encode_i_32(12, serializer);
      case LddKey_F12():
        sse_encode_i_32(13, serializer);
      case LddKey_F2():
        sse_encode_i_32(14, serializer);
      case LddKey_F3():
        sse_encode_i_32(15, serializer);
      case LddKey_F4():
        sse_encode_i_32(16, serializer);
      case LddKey_F5():
        sse_encode_i_32(17, serializer);
      case LddKey_F6():
        sse_encode_i_32(18, serializer);
      case LddKey_F7():
        sse_encode_i_32(19, serializer);
      case LddKey_F8():
        sse_encode_i_32(20, serializer);
      case LddKey_F9():
        sse_encode_i_32(21, serializer);
      case LddKey_Home():
        sse_encode_i_32(22, serializer);
      case LddKey_LeftArrow():
        sse_encode_i_32(23, serializer);
      case LddKey_MetaLeft():
        sse_encode_i_32(24, serializer);
      case LddKey_MetaRight():
        sse_encode_i_32(25, serializer);
      case LddKey_PageDown():
        sse_encode_i_32(26, serializer);
      case LddKey_PageUp():
        sse_encode_i_32(27, serializer);
      case LddKey_Return():
        sse_encode_i_32(28, serializer);
      case LddKey_RightArrow():
        sse_encode_i_32(29, serializer);
      case LddKey_ShiftLeft():
        sse_encode_i_32(30, serializer);
      case LddKey_ShiftRight():
        sse_encode_i_32(31, serializer);
      case LddKey_Space():
        sse_encode_i_32(32, serializer);
      case LddKey_Tab():
        sse_encode_i_32(33, serializer);
      case LddKey_UpArrow():
        sse_encode_i_32(34, serializer);
      case LddKey_PrintScreen():
        sse_encode_i_32(35, serializer);
      case LddKey_ScrollLock():
        sse_encode_i_32(36, serializer);
      case LddKey_Pause():
        sse_encode_i_32(37, serializer);
      case LddKey_NumLock():
        sse_encode_i_32(38, serializer);
      case LddKey_BackQuote():
        sse_encode_i_32(39, serializer);
      case LddKey_Num1():
        sse_encode_i_32(40, serializer);
      case LddKey_Num2():
        sse_encode_i_32(41, serializer);
      case LddKey_Num3():
        sse_encode_i_32(42, serializer);
      case LddKey_Num4():
        sse_encode_i_32(43, serializer);
      case LddKey_Num5():
        sse_encode_i_32(44, serializer);
      case LddKey_Num6():
        sse_encode_i_32(45, serializer);
      case LddKey_Num7():
        sse_encode_i_32(46, serializer);
      case LddKey_Num8():
        sse_encode_i_32(47, serializer);
      case LddKey_Num9():
        sse_encode_i_32(48, serializer);
      case LddKey_Num0():
        sse_encode_i_32(49, serializer);
      case LddKey_Minus():
        sse_encode_i_32(50, serializer);
      case LddKey_Equal():
        sse_encode_i_32(51, serializer);
      case LddKey_KeyQ():
        sse_encode_i_32(52, serializer);
      case LddKey_KeyW():
        sse_encode_i_32(53, serializer);
      case LddKey_KeyE():
        sse_encode_i_32(54, serializer);
      case LddKey_KeyR():
        sse_encode_i_32(55, serializer);
      case LddKey_KeyT():
        sse_encode_i_32(56, serializer);
      case LddKey_KeyY():
        sse_encode_i_32(57, serializer);
      case LddKey_KeyU():
        sse_encode_i_32(58, serializer);
      case LddKey_KeyI():
        sse_encode_i_32(59, serializer);
      case LddKey_KeyO():
        sse_encode_i_32(60, serializer);
      case LddKey_KeyP():
        sse_encode_i_32(61, serializer);
      case LddKey_LeftBracket():
        sse_encode_i_32(62, serializer);
      case LddKey_RightBracket():
        sse_encode_i_32(63, serializer);
      case LddKey_KeyA():
        sse_encode_i_32(64, serializer);
      case LddKey_KeyS():
        sse_encode_i_32(65, serializer);
      case LddKey_KeyD():
        sse_encode_i_32(66, serializer);
      case LddKey_KeyF():
        sse_encode_i_32(67, serializer);
      case LddKey_KeyG():
        sse_encode_i_32(68, serializer);
      case LddKey_KeyH():
        sse_encode_i_32(69, serializer);
      case LddKey_KeyJ():
        sse_encode_i_32(70, serializer);
      case LddKey_KeyK():
        sse_encode_i_32(71, serializer);
      case LddKey_KeyL():
        sse_encode_i_32(72, serializer);
      case LddKey_SemiColon():
        sse_encode_i_32(73, serializer);
      case LddKey_Quote():
        sse_encode_i_32(74, serializer);
      case LddKey_BackSlash():
        sse_encode_i_32(75, serializer);
      case LddKey_IntlBackslash():
        sse_encode_i_32(76, serializer);
      case LddKey_KeyZ():
        sse_encode_i_32(77, serializer);
      case LddKey_KeyX():
        sse_encode_i_32(78, serializer);
      case LddKey_KeyC():
        sse_encode_i_32(79, serializer);
      case LddKey_KeyV():
        sse_encode_i_32(80, serializer);
      case LddKey_KeyB():
        sse_encode_i_32(81, serializer);
      case LddKey_KeyN():
        sse_encode_i_32(82, serializer);
      case LddKey_KeyM():
        sse_encode_i_32(83, serializer);
      case LddKey_Comma():
        sse_encode_i_32(84, serializer);
      case LddKey_Dot():
        sse_encode_i_32(85, serializer);
      case LddKey_Slash():
        sse_encode_i_32(86, serializer);
      case LddKey_Insert():
        sse_encode_i_32(87, serializer);
      case LddKey_KpReturn():
        sse_encode_i_32(88, serializer);
      case LddKey_KpMinus():
        sse_encode_i_32(89, serializer);
      case LddKey_KpPlus():
        sse_encode_i_32(90, serializer);
      case LddKey_KpMultiply():
        sse_encode_i_32(91, serializer);
      case LddKey_KpDivide():
        sse_encode_i_32(92, serializer);
      case LddKey_Kp0():
        sse_encode_i_32(93, serializer);
      case LddKey_Kp1():
        sse_encode_i_32(94, serializer);
      case LddKey_Kp2():
        sse_encode_i_32(95, serializer);
      case LddKey_Kp3():
        sse_encode_i_32(96, serializer);
      case LddKey_Kp4():
        sse_encode_i_32(97, serializer);
      case LddKey_Kp5():
        sse_encode_i_32(98, serializer);
      case LddKey_Kp6():
        sse_encode_i_32(99, serializer);
      case LddKey_Kp7():
        sse_encode_i_32(100, serializer);
      case LddKey_Kp8():
        sse_encode_i_32(101, serializer);
      case LddKey_Kp9():
        sse_encode_i_32(102, serializer);
      case LddKey_KpDelete():
        sse_encode_i_32(103, serializer);
      case LddKey_Function():
        sse_encode_i_32(104, serializer);
      case LddKey_Unknown(field0: final field0):
        sse_encode_i_32(105, serializer);
        sse_encode_u_32(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_ldd_keyboard_value(
      LddKeyboardValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case LddKeyboardValue_ScanGunValue(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
        sse_encode_U128(field1, serializer);
      case LddKeyboardValue_KeyboardValue(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_ldd_event(field0, serializer);
        sse_encode_U128(field1, serializer);
      case LddKeyboardValue_ScanGunValueV2(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_list_ldd_event(field0, serializer);
      case LddKeyboardValue_KeyboardValueV2(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_box_autoadd_ldd_event(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_list_ldd_event(
      List<LddEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_ldd_event(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
      BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
